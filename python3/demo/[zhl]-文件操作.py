#coding:utf-8

# python中可以进行文件操作

# 想一下我们日常中要新建一个文档的话
# 需要怎么做？

# 1. 先要打开这个文档，如果没有的话还要先新建一个
# 2. 然后进行读写的操作
# 3. 一切完成后要保存并关闭这个文档

# 在python中对于文件操作也是这样子的
# 下面是一个完整的例子


file_name = 'demo.txt'          # 文件名

f = open(file_name,'w+')        # 以读写方式 打开文件
f.write('hello python')         # 写下东西
f.close()                       # 关闭文件

f = open(file_name,'r+')        # 以读写打开
c = f.read()                    # 读取内容  read(5) 带参数 表示读取多少字节
print(c)                        # 输出内容
f.close()                       # 关闭文件

'''
访问模式	    说明

r        	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
w	        打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
a	        打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
rb	        以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。
wb	        以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
ab	        以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
r+	        打开一个文件用于读写。文件指针将会放在文件的开头。
w+	        打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
a+	        打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
rb+	        以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。
wb+	        以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
ab+	        以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。


'''


# 还有个readlines函数
# 就像read没有参数时一样，
# readlines可以按照行的方式把整个文件中的内容进行一次性读取，
# 并且返回的是一个列表，其中每一行的数据为一个元素